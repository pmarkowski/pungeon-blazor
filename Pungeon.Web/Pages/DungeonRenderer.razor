@page "/"
@using System.Collections.Generic;
@using Pungeon.Web.Dungeons
@using Pungeon.Web.Dungeons.Rendering

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-warning">
        <p>Ran into a problem rendering the Dungeon JSON!</p>
        <p>@ErrorMessage</p>
    </div>
}

<div class="row">
    <div class="col-md-5 form-group">
        <textarea
            class="form-control text-monospace"
            style="width:100%; height: 100%;"
            @oninput="RenderDungeon"
            spellcheck="false">@System.Text.Json.JsonSerializer.Serialize(
                    Dungeon, new System.Text.Json.JsonSerializerOptions()
                    {
                        WriteIndented = true
                    })
        </textarea>
    </div>
    <div class="col-md-7">
        <div class="btn-group btn-group-toggle py-2" data-toggle="buttons">
            <label class="btn btn-secondary active"><input type="radio" name="control" id="new-room" checked><span class="oi oi-plus pr-1"></span>Room</label>
        </div>
        <div class="tile-container">
            @((MarkupString)RenderedDungeon)
        </div>
    </div>
</div>

@code {
    private Dungeon Dungeon;
    private string RenderedDungeon;
    private string ErrorMessage = string.Empty;

    protected override void OnInitialized()
    {
        Dungeon = new Dungeon()
        {
            Rooms = new List<DungeonRoom>()
            {
                new DungeonRoom()
                {
                    RelativePosition = new RelativePosition(1, 1),
                    Room = new Room()
                    {
                        Spaces = new List<Space>()
                        {
                            new Space()
                            {
                                RelativePosition = new RelativePosition(1, 1),
                                Size = new Size(5, 5)
                            },
                            new Space()
                            {
                                RelativePosition = new RelativePosition(6, 4),
                                Size = new Size(7, 9),
                                Connectors = new List<Connector>()
                                {
                                    new Connector()
                                    {
                                        Id = "Connector1",
                                        RelativePosition = new RelativePosition(7, 9)
                                    }
                                }
                            }
                        }
                    }
                },
                new DungeonRoom()
                {
                    RelativePosition = new RelativePosition(15, 16),
                    Room = new Room()
                    {
                        Spaces = new List<Space>()
                        {
                            new Space()
                            {
                                RelativePosition = new RelativePosition(0, 0),
                                Size = new Size(6, 7)
                            },
                            new Space()
                            {
                                RelativePosition = new RelativePosition(6, 3),
                                Size = new Size(4, 9),
                                Connectors = new List<Connector>()
                                {
                                    new Connector()
                                    {
                                        Id = "Connector2",
                                        RelativePosition = new RelativePosition(4, 9)
                                    }
                                }
                            }
                        }
                    }
                }
            },
            Connections = new List<Connection>()
            {
                new Connection()
                {
                    ConnectorId1 = "Connector1",
                    ConnectorId2 = "Connector2"
                }
            }
        };

        try
        {
            RenderedDungeon = AsciiRenderer.RenderToHtml(Dungeon.ToGrid());
            ErrorMessage = string.Empty;
        }
        catch (Exception e)
        {
            ErrorMessage = e.ToString();
        }
    }

    private void RenderDungeon(ChangeEventArgs args)
    {
        try
        {
            string dungeonJson = args.Value.ToString();
            Dungeon = System.Text.Json.JsonSerializer.Deserialize<Dungeon>(dungeonJson);
            RenderedDungeon = AsciiRenderer.RenderToHtml(Dungeon.ToGrid());
            ErrorMessage = string.Empty;
        }
        catch (Exception e)
        {
            ErrorMessage = e.ToString();
        }
    }
}
