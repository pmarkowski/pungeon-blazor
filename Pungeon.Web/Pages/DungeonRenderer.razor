@inherits DungeonRendererBase
@page "/"
@using Pungeon.Web.Dungeons
@using Pungeon.Web.ViewUtilities

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-warning">
        <p>Ran into a problem rendering the Dungeon JSON!</p>
        <p>@ErrorMessage</p>
    </div>
}

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" id="dungeon-editor-tab" data-toggle="tab" href="#dungeon-editor">Dungeon Editor</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="json-editor-tab" data-toggle="tab" href="#json-editor">JSON Editor</a>
    </li>
</ul>
<div class="tab-content">
    <div class="tab-pane form-group" id="json-editor">
        <textarea
            class="form-control text-monospace"
            style="width:100%; height: 80vh;"
            @oninput="RenderDungeon"
            spellcheck="false" @bind="DungeonJson">@DungeonJson
        </textarea>
    </div>
    <div class="tab-pane show active" id="dungeon-editor">
        <div class="btn-group btn-group-toggle py-2" data-toggle="buttons">
            <button data-toggle="button" class="btn btn-secondary @(currentTool == "selector" ? "active" : "")" @onclick="@(() => ChangeTool("selector"))">
                <span class="oi oi-location pr-1"></span>Select
            </button>
            <button data-toggle="button" class="btn btn-secondary @(currentTool == "new-space" ? "active" : "")" @onclick="@(() => ChangeTool("new-space"))">
                <span class="oi oi-plus pr-1"></span>Space
            </button>
        </div>
        <div class="tile-container" @onkeydown="@KeyDown" tabindex="-1">
            @{
            int yStart = Grid.GetMinimumY();
            int height = Grid.GetMaximumY();
            int xStart = Grid.GetMinimumX();
            int width = Grid.GetMaximumX();
            @for (int y = yStart; y <= height; y++)
            {
                <div class='tile-row'>
                @for (int x = xStart; x <= width; x++)
                {
                    string tileClass = null;
                    char tile = Grid[x, y].Character;
                    switch (tile)
                    {
                        case ' ':
                            tileClass = "empty";
                            break;
                        case '|':
                            tileClass = "wall";
                            break;
                        case '#':
                            tileClass = "full";
                            break;
                    }

                    if ((dragStartX.HasValue && dragStartY.HasValue) &&
                        (System.Math.Min(dragStartX.Value, currentHoverX) <= x && x <= System.Math.Max(dragStartX.Value, currentHoverX)) &&
                        (System.Math.Min(dragStartY.Value, currentHoverY) <= y && y <= System.Math.Max(dragStartY.Value, currentHoverY)))
                    {
                        tileClass += " hover";
                    }
                    else if (SelectedElementId.HasValue && SelectedElementId == Grid[x, y].ParentSpaceId)
                    {
                        tileClass += " hover";
                    }

                    int currentX = x;
                    int currentY = y;
                    <div
                        style='position: absolute; left: @((currentX - xStart) * 20)px; top: @((currentY - yStart) * 20)px;'
                        class='tile @(tileClass)'
                        @onmousedown="@(e => MouseDown(e, currentX, currentY))"
                        @onmouseup="@(e => MouseUp(e, currentX, currentY))"
                        @onmouseover="@(e => MouseOver(e, currentX, currentY))"></div>
                }
                </div>
            }
            @foreach (WallSegment wall in Dungeon.Walls)
            {
                @LineDivCreator.CreateLine(wall.Start.X * 20, wall.Start.Y * 20, wall.End.X * 20, wall.End.Y * 20)
            }
            }
        </div>
    </div>
</div>
