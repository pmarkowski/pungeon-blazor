@page "/dungeonrenderer"
@using System.Collections.Generic;
@using Pungeon.Web.Dungeons
@using Pungeon.Web.Dungeons.Rendering

<h3>Dungeon Renderer</h3>

@if (Error)
{
    <div class="alert alert-warning">Couldn't parse your Dungeon JSON!</div>
}

<div class="row">
    <div class="col-md-5 form-group">
        <textarea
            class="form-control text-monospace"
            style="width:100%; height: 100%;"
            @oninput="RenderDungeon"
            spellcheck="false">@System.Text.Json.JsonSerializer.Serialize(
                    Dungeon, new System.Text.Json.JsonSerializerOptions()
                    {
                        WriteIndented = true
                    })
        </textarea>
    </div>
    <div class="col-md-7">
        <pre>@RenderedDungeon</pre>
    </div>
</div>

@code {
    private Dungeon Dungeon;
    private string RenderedDungeon;
    private bool Error = false;

    protected override void OnInitialized()
    {
        Dungeon = new Dungeon()
        {
            Rooms = new List<DungeonRoom>()
            {
                new DungeonRoom()
                {
                    RelativePosition = new Position(1, 1),
                    Room = new Room()
                    {
                        Spaces = new List<Space>()
                        {
                            new Space()
                            {
                                RelativePosition = new Position(1, 1),
                                Size = new Size(5, 5)
                            },
                            new Space()
                            {
                                RelativePosition = new Position(6, 4),
                                Size = new Size(7, 9)
                            }
                        }
                    }
                },
                new DungeonRoom()
                {
                    RelativePosition = new Position(15, 16),
                    Room = new Room()
                    {
                        Spaces = new List<Space>()
                        {
                            new Space()
                            {
                                RelativePosition = new Position(0, 0),
                                Size = new Size(6, 7)
                            },
                            new Space()
                            {
                                RelativePosition = new Position(6, -3),
                                Size = new Size(4, 9)
                            }
                        }
                    }
                }
            }
        };

        RenderedDungeon = AsciiRenderer.Render(Dungeon);
    }

    private void RenderDungeon(ChangeEventArgs args)
    {
        try
        {
            string dungeonJson = args.Value.ToString();
            Dungeon = System.Text.Json.JsonSerializer.Deserialize<Dungeon>(dungeonJson);
            RenderedDungeon = AsciiRenderer.Render(Dungeon);
            Error = false;
        }
        catch
        {
            Error = true;
        }
    }
}
