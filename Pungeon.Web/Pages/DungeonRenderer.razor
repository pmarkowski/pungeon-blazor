@inherits DungeonRendererBase
@page "/"
@using Pungeon.Web.Dungeons
@using Pungeon.Web.ViewUtilities

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-warning">
        <p>Ran into a problem rendering the Dungeon JSON!</p>
        <p>@ErrorMessage</p>
    </div>
}
<div class="alert alert-warning">
    <h2>See the new version</h2>
    <p>
        This was a prototype created using Blazor to quickly get something interactive up and running.
        Over time it's become clear to me that the interactive nature of the project is a better fit
        for other technologies.
    </p>
    <p>I've begun to re-write this in React, using Pixi.JS as a renderer. Check it out
        <a href="./react-build/index.html">here!</a>
    </p>
</div>
<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" id="dungeon-editor-tab" data-toggle="tab" href="#dungeon-editor">Dungeon Editor</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="json-editor-tab" data-toggle="tab" href="#json-editor">JSON Editor</a>
    </li>
</ul>
<div class="tab-content">
    <div class="tab-pane form-group" id="json-editor">
        <textarea
            class="form-control text-monospace"
            style="width:100%; height: 80vh;"
            @oninput="RenderDungeon"
            spellcheck="false" @bind="DungeonJson">@DungeonJson
        </textarea>
    </div>
    <div class="tab-pane show active" id="dungeon-editor">
        <Toolbar OnToolSelect="@ChangeTool" />
        <div class="row">
            <div class="tile-container col-md-9" @onkeydown="@KeyDown" tabindex="-1">
                @{
                int yStart = Grid.GetMinimumY();
                int height = Grid.GetMaximumY();
                int xStart = Grid.GetMinimumX();
                int width = Grid.GetMaximumX();
                @for (int y = yStart; y <= height; y++)
                {
                    <div class='tile-row'>
                    @for (int x = xStart; x <= width; x++)
                    {
                        string tileClass = null;
                        char tile = Grid[x, y].Character;
                        switch (tile)
                        {
                            case ' ':
                                tileClass = "empty";
                                break;
                            case '|':
                                tileClass = "wall";
                                break;
                            case '#':
                                tileClass = "full";
                                break;
                        }

                        if (currentTool == ToolType.NewSpace &&
                            (dragStartX.HasValue && dragStartY.HasValue) &&
                            (System.Math.Min(dragStartX.Value, currentHoverX) <= x && x <= System.Math.Max(dragStartX.Value, currentHoverX)) &&
                            (System.Math.Min(dragStartY.Value, currentHoverY) <= y && y <= System.Math.Max(dragStartY.Value, currentHoverY)))
                        {
                            tileClass += " hover";
                        }
                        else if (SelectedElementId.HasValue && SelectedElementId == Grid[x, y].ParentSpaceId)
                        {
                            tileClass += " hover";
                        }

                        int currentX = x;
                        int currentY = y;
                        <div
                            style='position: absolute; left: @((currentX - xStart) * 20)px; top: @((currentY - yStart) * 20)px;'
                            class='tile @(tileClass)'
                            @onmousedown="@(e => MouseDown(e, currentX, currentY))"
                            @onmouseup="@(e => MouseUp(e, currentX, currentY))"
                            @onmouseover="@(e => MouseOver(e, currentX, currentY))"></div>
                    }
                    </div>
                }
                @foreach (WallSegment wall in Dungeon.Walls)
                {
                    @LineDivCreator.CreateLine(wall.Start.X * 20, wall.Start.Y * 20, wall.End.X * 20, wall.End.Y * 20)
                }
                @if (currentTool == ToolType.NewWall &&
                    (dragStartX.HasValue && dragStartY.HasValue))
                {
                    @LineDivCreator.CreateLine(dragStartX.Value * 20, dragStartY.Value * 20, currentHoverX * 20, currentHoverY * 20)
                }
                }
            </div>
            <div class="property-editor col-md-3">
                <PropertyEditor @bind-SelectedId="@SelectedElementId" Dungeon="@Dungeon" DungeonChanged="UpdateDungeon" />
            </div>
        </div>
    </div>
</div>
