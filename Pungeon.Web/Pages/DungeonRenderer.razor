@inherits DungeonRendererBase
@page "/"
@using Pungeon.Web.Dungeons

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-warning">
        <p>Ran into a problem rendering the Dungeon JSON!</p>
        <p>@ErrorMessage</p>
    </div>
}

<div class="row">
    <div class="col-md-5 form-group">
        <textarea
            class="form-control text-monospace"
            style="width:100%; height: 100%;"
            @oninput="RenderDungeon"
            spellcheck="false">@System.Text.Json.JsonSerializer.Serialize(
                    @Dungeon, new System.Text.Json.JsonSerializerOptions()
                    {
                        WriteIndented = true
                    })
        </textarea>
    </div>
    <div class="col-md-7">
        <div class="btn-group btn-group-toggle py-2" data-toggle="buttons">
            <button data-toggle="button" class="btn btn-secondary @(currentTool == "new-room" ? "active" : "")" @onclick="@(() => currentTool = "new-room")">
                <span class="oi oi-plus pr-1"></span>Room
            </button>
            <button data-toggle="button" class="btn btn-secondary @(currentTool == "new-connector" ? "active" : "")" @onclick="@(() => currentTool = "new-connector")">
                <span class="oi oi-plus pr-1"></span>Connector
            </button>
            <button data-toggle="button" class="btn btn-secondary @(currentTool == "new-connection" ? "active" : "")" @onclick="@(() => currentTool = "new-connection")">
                <span class="oi oi-plus pr-1"></span>Hallway
            </button>
        </div>
        <div class="tile-container">
            @{
            Grid grid = Dungeon.ToGrid();
            int yStart = grid.GetMinimumY();
            int height = grid.GetMaximumY();
            int xStart = grid.GetMinimumX();
            int width = grid.GetMaximumX();
            @for (int y = yStart; y <= height; y++)
            {
                <div class='tile-row' style='width:@((width - xStart + 1) * 20)px;'>
                @for (int x = xStart; x <= width; x++)
                {
                    string tileClass = null;
                    char tile = grid[x, y];
                    switch (tile)
                    {
                        case ' ':
                            tileClass = "empty";
                            break;
                        case '|':
                            tileClass = "wall";
                            break;
                        case '#':
                            tileClass = "full";
                            break;
                        case '+':
                            tileClass = "connector";
                            break;
                    }

                    if (connector1X == x && connector1Y == y ||
                        (dragStartX.HasValue && dragStartY.HasValue) &&
                        (System.Math.Min(dragStartX.Value, currentHoverX) <= x && x <= System.Math.Max(dragStartX.Value, currentHoverX)) &&
                        (System.Math.Min(dragStartY.Value, currentHoverY) <= y && y <= System.Math.Max(dragStartY.Value, currentHoverY)))
                    {
                        tileClass += " hover";
                    }

                    int currentX = x;
                    int currentY = y;
                    <div
                        class='tile @(tileClass)'
                        @onmousedown="@(e => MouseDown(e, currentX, currentY))"
                        @onmouseup="@(e => MouseUp(e, currentX, currentY))"
                        @onmouseover="@(e => MouseOver(e, currentX, currentY))"></div>
                }
                </div>
            }
            }
        </div>
    </div>
</div>
